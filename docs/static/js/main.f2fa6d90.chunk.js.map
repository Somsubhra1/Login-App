{"version":3,"sources":["FirebaseConfig.js","Auth.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firebase","require","initializeApp","Auth","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","err","login","bind","assertThisInitialized","signup","logout","event","_this2","preventDefault","email","refs","value","password","auth","signInWithEmailAndPassword","then","user","emailField","document","getElementById","passField","lout","lin","sin","classList","add","remove","setState","catch","e","message","console","log","_this3","createUserWithEmailAndPassword","currentUser","sendEmailVerification","database","ref","uid","set","signOut","react_default","a","createElement","id","type","placeholder","onClick","className","Component","App","src_Auth","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f2fa6d90.chunk.js","sourcesContent":["var config = {\n  apiKey: \"AIzaSyAS_vAUIqrXj12xzcHXnX4o9HspegqnVVs\",\n  authDomain: \"fir-login-5fce5.firebaseapp.com\",\n  databaseURL: \"https://fir-login-5fce5.firebaseio.com\",\n  projectId: \"fir-login-5fce5\",\n  storageBucket: \"fir-login-5fce5.appspot.com\",\n  messagingSenderId: \"821377824687\"\n};\nexport default config;\n","import React, {Component} from 'react';\nimport config from './FirebaseConfig';\n\n// importing firebase:\nvar firebase = require('firebase');\n\n// Initializing Firebase:\nfirebase.initializeApp(config);\n\nclass Auth extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      err: 'Welcome to login app!',\n    };\n    this.login = this.login.bind(this);\n    this.signup = this.signup.bind(this);\n    this.logout = this.logout.bind(this);\n  }\n\n  login(event) {\n    event.preventDefault();\n\n\n\n    const email = this.refs.email.value;\n    const password = this.refs.password.value;\n\n    const fbAuth = firebase.auth();\n    const promise = fbAuth.signInWithEmailAndPassword(email, password);\n\n    promise\n    .then(user => {\n      var emailField = document.getElementById('email');\n      var passField = document.getElementById('pass');\n      var lout = document.getElementById('logout');\n      var lin = document.getElementById('login');\n      var sin = document.getElementById('signup');\n      emailField.classList.add('hide');\n      passField.classList.add('hide');\n      lin.classList.add('hide');\n      sin.classList.add('hide');\n      lout.classList.remove('hide');\n\n      var err = 'Welcome ' + user.user.email;\n      this.setState({err: err});\n    })\n    .catch(e => {\n      var err = e.message;\n      console.log(err);\n      this.setState({err: err});\n    });\n  }\n\n  signup(event) {\n    event.preventDefault();\n    const email = this.refs.email.value;\n    const password = this.refs.password.value;\n\n    const fbAuth = firebase.auth();\n    const promise = fbAuth.createUserWithEmailAndPassword(email, password);\n\n    promise\n    .then(user => {\n      var err = 'Thanks for signing up ' + user.user.email;\n      var sin = document.getElementById('signup');\n      sin.classList.add('hide');\n      // Sending email verification\n      firebase.auth().currentUser.sendEmailVerification().then(() => {\n        // Email verification sent\n      }).catch(e => {\n        // Email verification not sent\n      });\n\n      firebase.database().ref('/users' + user.user.uid).set({\n        email: user.user.email,\n      });\n      console.log(user);\n      this.setState({err: err });\n    })\n    .catch(e => {\n      var err = e.message;\n      console.log(err);\n      this.setState({err: err });\n    });\n\n  }\n\n  logout(event) {\n    event.preventDefault();\n    firebase.auth().signOut();\n    var emailField = document.getElementById('email');\n    var passField = document.getElementById('pass');\n    var lout = document.getElementById('logout');\n    var lin = document.getElementById('login');\n    var sin = document.getElementById('signup');\n    emailField.classList.remove('hide');\n    passField.classList.remove('hide');\n    lin.classList.remove('hide');\n    sin.classList.remove('hide');\n    lout.classList.add('hide');\n    var err = 'Thank you for visiting.';\n    this.setState({err: err});\n  }\n\n  render(){\n    return(\n      <div>\n\n        <h1>{this.state.err}</h1>\n        <input id=\"email\" ref=\"email\" type=\"email\" placeholder=\"Enter your email\" /><br />\n        <input id=\"pass\" ref=\"password\" type=\"password\" placeholder=\"Enter your password\" /><br />\n\n        <button onClick={this.login} id=\"login\">Log In</button>\n        <button onClick={this.signup} id=\"signup\">Sign Up</button>\n        <button id=\"logout\" className=\"hide\" onClick={this.logout}>Log Out</button>\n\n      </div>\n    );\n  }\n}\n\nexport default Auth;\n","import React, { Component } from 'react';\nimport Auth from './Auth';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App text-center\">\n        <Auth />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}